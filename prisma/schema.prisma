// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String?
  username     String   @unique
  clerkId      String   @unique
  email        String   @unique
  website      String?
  bio          String
  registered   Boolean  @default(false)
  city         String
  country      String
  profilePhoto String?  @default("https://eu.ui-avatars.com/api/?name=John+Doe&color=7F9CF5&background=EBF4FF") // Default photo URL
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts       Blog[]
  comments    Comment[]
  votes       Vote[]
  views       View[]
  readingHistory ReadingHistory[]

  following User[] @relation("Follows")
  followers User[] @relation("Follows")
  notifications Notification[]
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String
  imageUrl    String?  @default("https://images.pexels.com/photos/262508/pexels-photo-262508.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  upVotes     Int      @default(0)
  downVotes   Int      @default(0)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]    
  categories  Category[]
  comments    Comment[]
  votes       Vote[]
  views       View[]
  readingHistory ReadingHistory[]
  notifications Notification[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  authorId  String
  blogId    String
  parentId  String?   // for replies

  author    User      @relation(fields: [authorId], references: [id])
  blog      Blog      @relation(fields: [blogId], references: [id])
  parent    Comment?  @relation("ReplyTo", fields: [parentId], references: [id])
  replies   Comment[] @relation("ReplyTo")

  notifications Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'reply' or 'comment'
  userId    String   // who receives it
  commentId String?
  blogId    String?
  createdAt DateTime @default(now())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  blog      Blog?    @relation(fields: [blogId], references: [id])
}


model Vote {
  id        String   @id @default(cuid())
  upVote    Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?
  @@unique([userId, blogId]) 
}

model View {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String

  @@unique([userId, blogId]) 
}

model Tag {
  id    String  @id @default(cuid())
  name  String  @unique
  blogs Blog[]
}

model Category {
  id    String  @id @default(cuid())
  name  String  @unique
  blogs Blog[]
}

model ReadingHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String

  @@unique([userId, blogId]) // Ensure unique reading history entries per user per blog
}